{"ast":null,"code":"import _objectSpread from \"/home/thayrone/dev/Readble/leitura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst api = \"http://localhost:3001\";\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  Authorization: token\n};\nexport const getPosts = category => {\n  const url = category ? \"\".concat(api, \"/\").concat(category, \"/posts\") : \"\".concat(api, \"/posts\");\n  return fetch(url, {\n    headers\n  }).then(res => res.json()).then(data => data);\n};\nexport const addPost = post => {\n  const data = _objectSpread({}, post, {\n    timestamp: Date.now()\n  });\n\n  return fetch(\"\".concat(api, \"/posts\"), {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(data)\n  }).then(res => res.json()).then(data => data);\n};\nexport const fetchPost = id => fetch(\"\".concat(api, \"/posts/\").concat(id), {\n  headers\n}).then(res => res.json()).then(data => data);\nexport const deletePost = post => fetch(\"\".concat(api, \"/posts/\").concat(post.id), {\n  method: \"DELETE\",\n  headers\n}).then(res => res.json()).then(data => data);\nexport const votePost = (id, vote) => fetch(\"\".concat(api, \"/posts/\").concat(id), {\n  method: \"POST\",\n  headers,\n  body: JSON.stringify({\n    option: vote\n  })\n}).then(res => {\n  console.log('res', res);\n  res.json();\n}).then(data => data);\nexport const editPost = post => {\n  const data = _objectSpread({}, post, {\n    timestamp: Date.now()\n  });\n\n  console.log(\"\".concat(api, \"/posts/\").concat(post.id));\n  console.log('DATA', post);\n  return fetch(\"\".concat(api, \"/posts/\").concat(post.id), {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(data)\n  }).then(res => res.json()).then(data => data);\n}; // ComentÃ¡rios\n\nexport const fetchComments = id => fetch(\"\".concat(api, \"/posts/\").concat(id, \"/comments\"), {\n  headers\n}).then(res => res.json()).then(data => data);\nexport const fetchComment = id => fetch(\"\".concat(api, \"/comments/\").concat(id), {\n  headers\n}).then(res => res.json()).then(data => data);\nexport const addComment = comment => {\n  return fetch(\"\".concat(api, \"/comments\"), {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(comment)\n  }).then(res => res.json()).then(data => data);\n};\nexport const voteComment = (id, option) => fetch(\"\".concat(api, \"/comments/\").concat(id), {\n  method: \"POST\",\n  headers,\n  body: JSON.stringify({\n    option\n  })\n}).then(res => res.json()).then(data => data);\nexport const editComment = comment => {\n  const data = _objectSpread({}, comment, {\n    timestamp: Date.now()\n  });\n\n  return fetch(\"\".concat(api, \"/comments/\").concat(comment.id), {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(data)\n  }).then(res => res.json()).then(data => data);\n};\nexport const deleteComment = comment => fetch(\"\".concat(api, \"/comments/\").concat(comment.id), {\n  method: \"DELETE\",\n  headers\n}).then(res => res.json()).then(data => data); // Categorias\n\nexport const fetchCategories = () => fetch(\"\".concat(api, \"/categories\"), {\n  headers\n}).then(res => res.json()).then(data => data.categories);","map":{"version":3,"sources":["/home/thayrone/dev/Readble/leitura/src/http.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getPosts","category","url","fetch","then","res","json","data","addPost","post","timestamp","Date","now","method","body","JSON","stringify","fetchPost","id","deletePost","votePost","vote","option","console","log","editPost","fetchComments","fetchComment","addComment","comment","voteComment","editComment","deleteComment","fetchCategories","categories"],"mappings":";AAAA,MAAMA,GAAG,GAAG,uBAAZ;AAEA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACEA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAC1BC,QAD0B,CACjB,EADiB,EAE1BC,MAF0B,CAEnB,CAAC,CAFkB,CAA7B;AAIF,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,kBADM;AAEd,kBAAgB,kBAFF;AAGdC,EAAAA,aAAa,EAAER;AAHD,CAAhB;AAMA,OAAO,MAAMS,QAAQ,GAAGC,QAAQ,IAAI;AAClC,QAAMC,GAAG,GAAGD,QAAQ,aAAMX,GAAN,cAAaW,QAAb,wBAAmCX,GAAnC,WAApB;AACA,SAAOa,KAAK,CAACD,GAAD,EAAM;AAAEL,IAAAA;AAAF,GAAN,CAAL,CACJO,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADR,EAEJF,IAFI,CAECG,IAAI,IAAIA,IAFT,CAAP;AAGD,CALM;AAOP,OAAO,MAAMC,OAAO,GAAGC,IAAI,IAAI;AAC7B,QAAMF,IAAI,qBACLE,IADK;AAERC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFH,IAAV;;AAKA,SAAOT,KAAK,WAAIb,GAAJ,aAAiB;AAC3BuB,IAAAA,MAAM,EAAE,MADmB;AAE3BhB,IAAAA,OAF2B;AAG3BiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAHqB,GAAjB,CAAL,CAKJH,IALI,CAKCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALR,EAMJF,IANI,CAMCG,IAAI,IAAIA,IANT,CAAP;AAOD,CAbM;AAeP,OAAO,MAAMU,SAAS,GAAGC,EAAE,IACzBf,KAAK,WAAIb,GAAJ,oBAAiB4B,EAAjB,GAAuB;AAAErB,EAAAA;AAAF,CAAvB,CAAL,CACGO,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIA,IAFhB,CADK;AAMP,OAAO,MAAMY,UAAU,GAAGV,IAAI,IAC9BN,KAAK,WAAIb,GAAJ,oBAAiBmB,IAAI,CAACS,EAAtB,GAA4B;AAC/BL,EAAAA,MAAM,EAAE,QADuB;AAE/BhB,EAAAA;AAF+B,CAA5B,CAAL,CAIGO,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKGF,IALH,CAKQG,IAAI,IAAIA,IALhB,CADO;AASP,OAAO,MAAMa,QAAQ,GAAG,CAACF,EAAD,EAAKG,IAAL,KAEpBlB,KAAK,WAAIb,GAAJ,oBAAiB4B,EAAjB,GAAuB;AAC5BL,EAAAA,MAAM,EAAE,MADoB;AAE5BhB,EAAAA,OAF4B;AAG5BiB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBM,IAAAA,MAAM,EAAED;AADW,GAAf;AAHsB,CAAvB,CAAL,CAOCjB,IAPD,CAOMC,GAAG,IAAI;AAACkB,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBnB,GAAnB;AACdA,EAAAA,GAAG,CAACC,IAAJ;AAAW,CARX,EASCF,IATD,CASMG,IAAI,IAAIA,IATd,CAFG;AAaP,OAAO,MAAMkB,QAAQ,GAAGhB,IAAI,IAAI;AAC9B,QAAMF,IAAI,qBACLE,IADK;AAERC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFH,IAAV;;AAKAW,EAAAA,OAAO,CAACC,GAAR,WAAelC,GAAf,oBAA4BmB,IAAI,CAACS,EAAjC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBf,IAApB;AACA,SAAON,KAAK,WAAIb,GAAJ,oBAAiBmB,IAAI,CAACS,EAAtB,GAA4B;AACtCL,IAAAA,MAAM,EAAE,KAD8B;AAEtChB,IAAAA,OAFsC;AAGtCiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAHgC,GAA5B,CAAL,CAKJH,IALI,CAKCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALR,EAMJF,IANI,CAMCG,IAAI,IAAIA,IANT,CAAP;AAOD,CAfM,C,CAkBP;;AACA,OAAO,MAAMmB,aAAa,GAAGR,EAAE,IAC7Bf,KAAK,WAAIb,GAAJ,oBAAiB4B,EAAjB,gBAAgC;AAAErB,EAAAA;AAAF,CAAhC,CAAL,CACGO,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIA,IAFhB,CADK;AAKP,OAAO,MAAMoB,YAAY,GAAGT,EAAE,IAC5Bf,KAAK,WAAIb,GAAJ,uBAAoB4B,EAApB,GAA0B;AAAErB,EAAAA;AAAF,CAA1B,CAAL,CACGO,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIA,IAFhB,CADK;AAKP,OAAO,MAAMqB,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO1B,KAAK,WAAIb,GAAJ,gBAAoB;AAC9BuB,IAAAA,MAAM,EAAE,MADsB;AAE9BhB,IAAAA,OAF8B;AAG9BiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAea,OAAf;AAHwB,GAApB,CAAL,CAKJzB,IALI,CAKCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALR,EAMJF,IANI,CAMCG,IAAI,IAAIA,IANT,CAAP;AAOD,CARM;AAUP,OAAO,MAAMuB,WAAW,GAAG,CAACZ,EAAD,EAAKI,MAAL,KACzBnB,KAAK,WAAIb,GAAJ,uBAAoB4B,EAApB,GAA0B;AAC7BL,EAAAA,MAAM,EAAE,MADqB;AAE7BhB,EAAAA,OAF6B;AAG7BiB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEM,IAAAA;AAAF,GAAf;AAHuB,CAA1B,CAAL,CAKGlB,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQG,IAAI,IAAIA,IANhB,CADK;AASP,OAAO,MAAMwB,WAAW,GAAGF,OAAO,IAAI;AACpC,QAAMtB,IAAI,qBACLsB,OADK;AAERnB,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAFH,IAAV;;AAKA,SAAOT,KAAK,WAAIb,GAAJ,uBAAoBuC,OAAO,CAACX,EAA5B,GAAkC;AAC5CL,IAAAA,MAAM,EAAE,KADoC;AAE5ChB,IAAAA,OAF4C;AAG5CiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAHsC,GAAlC,CAAL,CAKJH,IALI,CAKCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALR,EAMJF,IANI,CAMCG,IAAI,IAAIA,IANT,CAAP;AAOD,CAbM;AAeP,OAAO,MAAMyB,aAAa,GAAGH,OAAO,IAClC1B,KAAK,WAAIb,GAAJ,uBAAoBuC,OAAO,CAACX,EAA5B,GAAkC;AACrCL,EAAAA,MAAM,EAAE,QAD6B;AAErChB,EAAAA;AAFqC,CAAlC,CAAL,CAIGO,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKGF,IALH,CAKQG,IAAI,IAAIA,IALhB,CADK,C,CASP;;AACA,OAAO,MAAM0B,eAAe,GAAG,MAC/B9B,KAAK,WAAIb,GAAJ,kBAAsB;AAAEO,EAAAA;AAAF,CAAtB,CAAL,CACGO,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIA,IAAI,CAAC2B,UAFrB,CADO","sourcesContent":["const api = \"http://localhost:3001\";\n\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  Authorization: token\n};\n\nexport const getPosts = category => {\n  const url = category ? `${api}/${category}/posts` : `${api}/posts`;\n  return fetch(url, { headers })\n    .then(res => res.json())\n    .then(data => data);\n};\n\nexport const addPost = post => {\n  const data = {\n    ...post,\n    timestamp: Date.now()\n  };\n\n  return fetch(`${api}/posts`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(data)\n  })\n    .then(res => res.json())\n    .then(data => data);\n};\n\nexport const fetchPost = id =>\n  fetch(`${api}/posts/${id}`, { headers })\n    .then(res => res.json())\n    .then(data => data);\n\n\nexport const deletePost = post =>\nfetch(`${api}/posts/${post.id}`, {\n  method: \"DELETE\",\n  headers\n})\n  .then(res => res.json())\n  .then(data => data);\n\n\nexport const votePost = (id, vote) =>\n  \n    fetch(`${api}/posts/${id}`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      option: vote\n    })\n  })\n    .then(res => {console.log('res', res) \n    res.json()})\n    .then(data => data);\n\nexport const editPost = post => {\n  const data = {\n    ...post,\n    timestamp: Date.now()\n  };\n\n  console.log(`${api}/posts/${post.id}`)\n  console.log('DATA', post)\n  return fetch(`${api}/posts/${post.id}`, {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(data)\n  })\n    .then(res => res.json())\n    .then(data => data);\n};\n\n\n// ComentÃ¡rios\nexport const fetchComments = id =>\n  fetch(`${api}/posts/${id}/comments`, { headers })\n    .then(res => res.json())\n    .then(data => data);\n\nexport const fetchComment = id =>\n  fetch(`${api}/comments/${id}`, { headers })\n    .then(res => res.json())\n    .then(data => data);\n\nexport const addComment = comment => {\n  return fetch(`${api}/comments`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(comment)\n  })\n    .then(res => res.json())\n    .then(data => data);\n};\n\nexport const voteComment = (id, option) =>\n  fetch(`${api}/comments/${id}`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ option })\n  })\n    .then(res => res.json())\n    .then(data => data);\n\nexport const editComment = comment => {\n  const data = {\n    ...comment,\n    timestamp: Date.now()\n  };\n\n  return fetch(`${api}/comments/${comment.id}`, {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(data)\n  })\n    .then(res => res.json())\n    .then(data => data);\n};\n\nexport const deleteComment = comment =>\n  fetch(`${api}/comments/${comment.id}`, {\n    method: \"DELETE\",\n    headers\n  })\n    .then(res => res.json())\n    .then(data => data);\n\n\n// Categorias\nexport const fetchCategories = () =>\nfetch(`${api}/categories`, { headers })\n  .then(res => res.json())\n  .then(data => data.categories);\n"]},"metadata":{},"sourceType":"module"}